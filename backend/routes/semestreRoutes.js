// backend/routes/semestreRoutes.js
const express = require('express');
const router = express.Router();
const Semestre = require('../models/Semestre');
const Module = require('../models/Module'); // Remplacer ModuleGlobal par Module
const SousModule = require('../models/SousModule'); // Ajouter SousModule pour r√©f√©rence

// ‚û§ Ajouter un semestre
router.post('/', async (req, res) => {
  try {
    const { numero, description } = req.body;

    // V√©rifier si le semestre existe d√©j√†
    const existingSemestre = await Semestre.findOne({ numero: parseInt(numero) });
    if (existingSemestre) {
      return res.status(400).json({ message: 'Ce semestre existe d√©j√†.' });
    }

    // Validation du num√©ro de semestre
    if (![1, 2, 3, 4, 5, 6].includes(parseInt(numero))) {
      return res.status(400).json({ message: 'Num√©ro de semestre invalide. Valeurs possibles : 1, 2, 3, 4, 5, 6.' });
    }

    // Cr√©ation du semestre
    const semestre = new Semestre({ numero: parseInt(numero), description });
    await semestre.save();
    res.status(201).json(semestre);
  } catch (error) {
    console.log('‚ùå Erreur lors de l‚Äôajout du semestre :', error.message);
    res.status(400).json({ message: error.message });
  }
});

// ‚û§ Ajouter des modules globaux √† un semestre pour un d√©partement
router.put('/:semestreNumero/:departementCode/modules', async (req, res) => {
  try {
    const { semestreNumero, departementCode } = req.params;
    const { moduleCodes } = req.body;

    console.log(`üìå Ajout des modules au Semestre ${semestreNumero} pour le d√©partement ${departementCode}`);
    console.log(`üìå Donn√©es re√ßues :`, req.body);

    // V√©rifier si le semestre existe
    const semestre = await Semestre.findOne({ numero: parseInt(semestreNumero) });
    if (!semestre) {
      return res.status(404).json({ message: 'Semestre non trouv√©.' });
    }

    // Validation du d√©partement
    if (!['INFO', 'MECA', 'ELEC'].includes(departementCode)) {
      return res.status(400).json({ message: 'Code de d√©partement invalide. Valeurs possibles : INFO, MECA, ELEC.' });
    }

    // V√©rifier que les modules existent et correspondent au d√©partement et au semestre
    const semestreFormat = `S${semestreNumero}`;
    const modules = await Module.find({
      code: { $in: moduleCodes },
      departementCode,
      semestre: semestreFormat,
    });

    console.log(`üìå Modules trouv√©s :`, modules);

    if (modules.length === 0) {
      return res.status(404).json({ message: 'Aucun module global trouv√© pour ce d√©partement et semestre.' });
    }

    if (modules.length !== moduleCodes.length) {
      return res.status(400).json({ message: 'Certains codes de modules sont invalides ou ne correspondent pas au d√©partement/semestre.' });
    }

    // Ajouter les modules au semestre (√©viter les doublons)
    const newModuleIds = modules.map((m) => m._id);
    semestre.modulesGlobales = [...new Set([...semestre.modulesGlobales, ...newModuleIds])];
    await semestre.save();

    res.json({ message: 'Modules ajout√©s avec succ√®s au semestre', semestre });
  } catch (error) {
    console.log('‚ùå Erreur lors de l‚Äôajout des modules :', error.message);
    res.status(500).json({ message: error.message });
  }
});

// ‚û§ R√©cup√©rer les modules d‚Äôun semestre pour un d√©partement
router.get('/:semestreNumero/:departementCode/modules', async (req, res) => {
  try {
    const { semestreNumero, departementCode } = req.params;

    // V√©rifier si le semestre existe
    const semestre = await Semestre.findOne({ numero: parseInt(semestreNumero) }).populate('modulesGlobales');
    if (!semestre) {
      return res.status(404).json({ message: 'Semestre non trouv√©.' });
    }

    // Validation du d√©partement
    if (!['INFO', 'MECA', 'ELEC'].includes(departementCode)) {
      return res.status(400).json({ message: 'Code de d√©partement invalide. Valeurs possibles : INFO, MECA, ELEC.' });
    }

    // Filtrer les modules sp√©cifiques au d√©partement
    const modules = semestre.modulesGlobales.filter((m) => m.departementCode === departementCode);

    if (modules.length === 0) {
      return res.status(404).json({ message: 'Aucun module trouv√© pour ce d√©partement et semestre.' });
    }

    // R√©cup√©rer les sous-modules associ√©s
    const moduleIds = modules.map((m) => m._id);
    const sousModules = await SousModule.find({
      moduleId: { $in: moduleIds },
      departementCode,
    });

    const modulesWithSousModules = modules.map((module) => ({
      ...module._doc,
      sousModules: sousModules.filter((sm) => sm.moduleId.toString() === module._id.toString()),
    }));

    res.json({
      semestre: `S${semestreNumero}`,
      departement: departementCode,
      modules: modulesWithSousModules,
    });
  } catch (error) {
    console.log('‚ùå Erreur lors de la r√©cup√©ration des modules :', error.message);
    res.status(500).json({ message: error.message });
  }
});

// ‚û§ R√©cup√©rer tous les semestres
router.get('/', async (req, res) => {
  try {
    const semestres = await Semestre.find().populate('modulesGlobales');
    res.json(semestres);
  } catch (error) {
    console.log('‚ùå Erreur lors de la r√©cup√©ration des semestres :', error.message);
    res.status(500).json({ message: error.message });
  }
});

// ‚û§ R√©cup√©rer un semestre par num√©ro
router.get('/:numero', async (req, res) => {
  try {
    const semestre = await Semestre.findOne({ numero: parseInt(req.params.numero) }).populate('modulesGlobales');
    if (!semestre) {
      return res.status(404).json({ message: 'Semestre non trouv√©.' });
    }
    res.json(semestre);
  } catch (error) {
    console.log('‚ùå Erreur lors de la r√©cup√©ration du semestre :', error.message);
    res.status(500).json({ message: error.message });
  }
});

// ‚û§ Mettre √† jour un semestre
router.put('/:numero', async (req, res) => {
  try {
    const semestre = await Semestre.findOneAndUpdate(
      { numero: parseInt(req.params.numero) },
      req.body,
      { new: true }
    );
    if (!semestre) {
      return res.status(404).json({ message: 'Semestre non trouv√©.' });
    }
    res.json(semestre);
  } catch (error) {
    console.log('‚ùå Erreur lors de la mise √† jour du semestre :', error.message);
    res.status(400).json({ message: error.message });
  }
});

// ‚û§ Supprimer un semestre
router.delete('/:numero', async (req, res) => {
  try {
    const semestre = await Semestre.findOneAndDelete({ numero: parseInt(req.params.numero) });
    if (!semestre) {
      return res.status(404).json({ message: 'Semestre non trouv√©.' });
    }
    res.json({ message: 'Semestre supprim√© avec succ√®s.' });
  } catch (error) {
    console.log('‚ùå Erreur lors de la suppression du semestre :', error.message);
    res.status(500).json({ message: error.message });
  }
});

module.exports = router;