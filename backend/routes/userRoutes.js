// backend/routes/userRoutes.js
const express = require('express');
const router = express.Router();
const User = require('../models/User');
const SousModule = require('../models/SousModule'); // Ajout pour valider les sous-modules
const { verifyToken, isChefDepartement } = require('../middlewares/authMiddleware');
const bcrypt = require('bcryptjs');
const mongoose = require('mongoose');

// ‚û§ Affecter un sous-module √† un Professeur (R√©serv√© aux Chefs de D√©partement)
router.put('/assign-sousmodule/:professeurId', verifyToken, isChefDepartement, async (req, res) => {
  try {
    const { professeurId } = req.params;
    const { sousModuleCode } = req.body;

    // V√©rifier si les champs sont fournis
    if (!sousModuleCode) {
      return res.status(400).json({ message: 'Le code du sous-module est requis.' });
    }

    const professeur = await User.findById(professeurId);
    if (!professeur || professeur.role !== 'Professeur') {
      return res.status(404).json({ message: 'Professeur non trouv√©.' });
    }

    // V√©rifier que le professeur appartient au d√©partement du chef
    if (professeur.departementCode !== req.user.departementCode) {
      return res.status(403).json({ message: 'Acc√®s interdit. Vous ne pouvez assigner que des professeurs de votre d√©partement.' });
    }

    // V√©rifier si le sous-module existe et appartient au d√©partement du chef
    const sousModule = await SousModule.findOne({ code: sousModuleCode });
    if (!sousModule) {
      return res.status(404).json({ message: 'Sous-module non trouv√©.' });
    }
    if (sousModule.departementCode !== req.user.departementCode) {
      return res.status(403).json({ message: 'Acc√®s interdit. Ce sous-module n‚Äôappartient pas √† votre d√©partement.' });
    }

    // V√©rifier si le sous-module n‚Äôest pas d√©j√† affect√©
    if (professeur.sousModulesEnseignes.includes(sousModuleCode)) {
      return res.status(400).json({ message: 'Ce sous-module est d√©j√† assign√© √† ce professeur.' });
    }

    professeur.sousModulesEnseignes.push(sousModuleCode);
    await professeur.save();

    res.json({ message: `Sous-module ${sousModuleCode} assign√© avec succ√®s √† ${professeur.nom} ${professeur.prenom}.` });
  } catch (error) {
    console.log('‚ùå Erreur lors de l‚Äôaffectation du sous-module :', error.message);
    res.status(500).json({ message: error.message });
  }
});

// ‚û§ Mettre √† jour tous les sous-modules d‚Äôun Professeur (R√©serv√© aux Chefs de D√©partement)
router.put('/update-sousmodules/:professeurId', verifyToken, isChefDepartement, async (req, res) => {
  try {
    const { professeurId } = req.params;
    const { sousModulesEnseignes } = req.body;

    // V√©rifier si les champs sont fournis
    if (!sousModulesEnseignes || !Array.isArray(sousModulesEnseignes)) {
      return res.status(400).json({ message: 'Les sous-modules doivent √™tre fournis sous forme de tableau.' });
    }

    // V√©rifier si l‚ÄôID est valide
    if (!mongoose.Types.ObjectId.isValid(professeurId)) {
      return res.status(400).json({ message: 'ID du professeur invalide.' });
    }

    const professeur = await User.findById(professeurId);
    if (!professeur || professeur.role !== 'Professeur') {
      return res.status(404).json({ message: 'Professeur non trouv√©.' });
    }

    // V√©rifier que le professeur appartient au d√©partement du chef
    if (professeur.departementCode !== req.user.departementCode) {
      return res.status(403).json({ message: 'Vous ne pouvez modifier que les professeurs de votre d√©partement.' });
    }

    console.log(`üìå Mise √† jour des sous-modules du Professeur ${professeur.nom} ${professeur.prenom} (${professeurId})`);
    console.log(`üìå Nouveaux sous-modules :`, sousModulesEnseignes);

    // V√©rifier que tous les sous-modules existent et appartiennent au d√©partement
    const sousModules = await SousModule.find({ code: { $in: sousModulesEnseignes } });
    if (sousModules.length !== sousModulesEnseignes.length) {
      return res.status(400).json({ message: 'Certains sous-modules sp√©cifi√©s n‚Äôexistent pas.' });
    }
    const invalidSousModules = sousModules.filter((sm) => sm.departementCode !== req.user.departementCode);
    if (invalidSousModules.length > 0) {
      return res.status(403).json({
        message: 'Certains sous-modules n‚Äôappartiennent pas √† votre d√©partement.',
        invalidSousModules: invalidSousModules.map((sm) => sm.code),
      });
    }

    professeur.sousModulesEnseignes = sousModulesEnseignes;
    await professeur.save();

    res.json({ message: 'Sous-modules mis √† jour avec succ√®s.', professeur });
  } catch (error) {
    console.log('‚ùå Erreur lors de la mise √† jour des sous-modules :', error.message);
    res.status(500).json({ message: error.message });
  }
});

// ‚û§ Ajouter un Professeur (R√©serv√© aux Chefs de D√©partement)
router.post('/add-professeur', verifyToken, isChefDepartement, async (req, res) => {
  try {
    const { nom, prenom, email, password, departementCode } = req.body;

    // V√©rifier si les champs sont fournis
    if (!nom || !prenom || !email || !password || !departementCode) {
      return res.status(400).json({ message: 'Tous les champs (nom, prenom, email, password, departementCode) sont requis.' });
    }

    // V√©rifier si l‚Äôemail est d√©j√† utilis√©
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: 'Cet email est d√©j√† utilis√©.' });
    }

    // V√©rifier que le chef de d√©partement ne cr√©e pas un professeur pour un autre d√©partement
    if (req.user.departementCode !== departementCode) {
      return res.status(403).json({ message: 'Vous ne pouvez ajouter des professeurs que pour votre d√©partement.' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const professeur = new User({ nom, prenom, email, password: hashedPassword, role: 'Professeur', departementCode });

    await professeur.save();
    res.status(201).json({ message: 'Professeur ajout√© avec succ√®s.', professeur: { id: professeur._id, email: professeur.email } });
  } catch (error) {
    console.log('‚ùå Erreur lors de l‚Äôajout du professeur :', error.message);
    res.status(500).json({ message: error.message });
  }
});

// ‚û§ Modifier un professeur
router.put('/update-professeur/:professeurId', verifyToken, isChefDepartement, async (req, res) => {
  try {
    const { professeurId } = req.params;
    const { nom, prenom, email } = req.body;

    // V√©rifier si l‚ÄôID est valide
    if (!mongoose.Types.ObjectId.isValid(professeurId)) {
      return res.status(400).json({ message: 'ID du professeur invalide.' });
    }

    const professeur = await User.findById(professeurId);
    if (!professeur || professeur.role !== 'Professeur') {
      return res.status(404).json({ message: 'Professeur non trouv√©.' });
    }

    // V√©rifier que le professeur appartient au d√©partement du chef
    if (professeur.departementCode !== req.user.departementCode) {
      return res.status(403).json({ message: 'Vous ne pouvez modifier que les professeurs de votre d√©partement.' });
    }

    // Mettre √† jour les champs fournis
    professeur.nom = nom || professeur.nom;
    professeur.prenom = prenom || professeur.prenom;
    if (email && email !== professeur.email) {
      const existingUser = await User.findOne({ email });
      if (existingUser) {
        return res.status(400).json({ message: 'Cet email est d√©j√† utilis√©.' });
      }
      professeur.email = email;
    }

    await professeur.save();
    res.json({ message: 'Professeur mis √† jour avec succ√®s.', professeur });
  } catch (error) {
    console.log('‚ùå Erreur lors de la mise √† jour du professeur :', error.message);
    res.status(500).json({ message: error.message });
  }
});

// ‚û§ Supprimer un professeur
router.delete('/delete-professeur/:professeurId', verifyToken, isChefDepartement, async (req, res) => {
  try {
    const { professeurId } = req.params;

    const professeur = await User.findById(professeurId);
    if (!professeur || professeur.role !== 'Professeur') {
      return res.status(404).json({ message: 'Professeur non trouv√©.' });
    }

    // V√©rifier que le professeur appartient au d√©partement du chef
    if (professeur.departementCode !== req.user.departementCode) {
      return res.status(403).json({ message: 'Vous ne pouvez supprimer que les professeurs de votre d√©partement.' });
    }

    await professeur.deleteOne();
    res.json({ message: 'Professeur supprim√© avec succ√®s.' });
  } catch (error) {
    console.log('‚ùå Erreur lors de la suppression du professeur :', error.message);
    res.status(500).json({ message: error.message });
  }
});

module.exports = router;